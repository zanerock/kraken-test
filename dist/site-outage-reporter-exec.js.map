{"version":3,"file":"site-outage-reporter-exec.js","sources":["../src/cli/cli-spec.mjs","../src/lib/lib/smart-fetch.mjs","../src/lib/lib/kraken-system.mjs","../src/lib/site-outage-reporter.mjs","../src/lib/lib/get-configured-api-key.mjs","../src/lib/lib/merge-outage-data.mjs","../src/cli/index.mjs","../src/cli/site-outage-reporter-cli.mjs"],"sourcesContent":["import { DateTime } from 'string-input'\n\nconst cliSpec = {\n  mainCommand : 'site-outage-reporter',\n  arguments   : [\n    {\n      name        : 'api-key',\n      description : \"The API key to use in contacting the Kraken system. If not provided, will search the current working dir for 'api-key.txt' and use it's contents as the key.\"\n    },\n    {\n      name        : 'cutoff-time',\n      type        : DateTime,\n      typeDesc    : 'DateTime',\n      description : \"The earliest outage (beginning) to include in the site outage report. Will accept many formats including '2022-01-01T00:00:00.000Z', '1 Jan 2022 00:00:00 Z,', '2022-01-01 00:00:00 Z', etc.\",\n      default     : '2022-01-01T00:00:00.000Z'\n    },\n    { name : 'site-id', description : 'The site ID for which to generate the report.', default : 'norwich-pear-tree' },\n    {\n      name        : 'throw-error',\n      type        : Boolean,\n      description : 'If set, will throw an error instead of simply reporting the message. Useful for debugging.'\n    }\n  ]\n}\n\nexport { cliSpec }\n","import fetchRetry from 'fetch-retry'\n\nconst retryCount = 3\nconst defaultRetryDelay = 1000 // ms\n\nconst smartFetch = async ({ apiKey, url, fetch = global.fetch, retryDelay = defaultRetryDelay, options }) => {\n  fetch = fetchRetry(fetch)\n\n  const method = options?.method || 'GET'\n  process.stdout.write(`Calling ${method} ${url}...\\n`)\n\n  const fetchOptions = { headers : { 'x-api-key' : apiKey }, retryDelay }\n  Object.assign(fetchOptions, options)\n  fetchOptions.retryOn = (attempt, error, response) => { // first attempt is 0\n    // retry on any network error, or retry-able 400 or 5xx status codes\n    const { status } = response\n    if (error !== null || (status === 408 || status === 409 || status === 429 || status >= 500)) {\n      if (attempt < retryCount) {\n        if (error !== null) {\n          process.stdout.write('Error reported: ' + error.message + '\\n')\n        }\n        process.stdout.write(`retrying (got status: ${response.status}); attempt ${attempt + 1} of ${retryCount}...\\n`)\n        return true\n      } else {\n        process.stdout.write('retry count exceeded\\n')\n      }\n    }\n    return false\n  }\n\n  const response = await fetch(url, fetchOptions)\n  const data = await response.json() // we get JSON data for bad response too\n  if (response.ok === false) {\n    throw new Error(`Call failed (status: ${response.status}${data?.message ? '; message: ' + data.message : ''}).`)\n  } else {\n    process.stdout.write('request complete\\n')\n  }\n\n  return data\n}\n\nexport { smartFetch }\n","import { smartFetch } from './smart-fetch'\n\nconst baseURL = 'https://api.krakenflex.systems/interview-tests-mock-api/v1'\n\nconst KrakenSystem = class {\n  constructor (apiKey) {\n    this.apiKey = apiKey\n  }\n\n  async getOutages () {\n    const outageData = await smartFetch({ apiKey : this.apiKey, url : baseURL + '/outages' })\n    process.stdout.write(`Found ${outageData.length} outages...\\n`)\n    return outageData\n  }\n\n  async getSiteInfo (siteId) {\n    return smartFetch({ apiKey : this.apiKey, url : baseURL + `/site-info/${siteId}` })\n  }\n\n  async postSiteOutages (siteId, siteOutageData) {\n    const postOptions = { body : JSON.stringify(siteOutageData), method : 'POST' }\n    return smartFetch({ apiKey : this.apiKey, url : baseURL + '/site-outages/' + siteId, options : postOptions })\n  }\n}\n\nexport { KrakenSystem }\n","import { getConfiguredAPIKey } from './lib/get-configured-api-key'\nimport { KrakenSystem } from './lib/kraken-system'\nimport { mergeOutageData } from './lib/merge-outage-data'\n\n/**\n * Creates and posts an enhanced outage report for a particular site.\n * @param {object} options - The options.\n * @param {string} options.apiKey - The API key to use to contact the Kraken system. If no API key is given, the\n *   function will search `configDir` for an `api-key.txt` file and treat the contents of that file as the API key.\n * @param {string} options.configDir - The directory where `api-key.txt` can be found, if needed. Defaults to\n *   `process.cwd()`.\n * @param {Date} options.cutoffTime - The earliest outage time to include in the site outage report. Defaults to\n *   '2022-01-01T00:00:00.000Z'.\n * @param {string} options.siteId - The site to generate the site outage report for. Default to 'norwich-pear-tree'.\n */\nconst siteOutageReporter = async function ({\n  apiKey,\n  // if this were a real tool, we would default to something like ~/.config/enhanced-outage-reporter/, but for the test\n  // this is actually more user friendly\n  configDir = process.cwd(),\n  // if this were real, we would probably leave these undefined if not set\n  cutoffTime = new Date('2022-01-01T00:00:00.000Z'),\n  siteId = 'norwich-pear-tree'\n} = {}) {\n  if (apiKey === undefined) {\n    apiKey = await getConfiguredAPIKey(configDir) // handle error conditions internally\n  }\n\n  process.stdout.write(`Attempting to report outages for ${siteId} at or before ${cutoffTime.toISOString()}...\\n`)\n\n  const krakenSystem = new KrakenSystem(apiKey)\n\n  const outages = await krakenSystem.getOutages() // will raise an exception if there's a problem\n  const siteInfo = await krakenSystem.getSiteInfo(siteId)\n\n  const siteOutageData = mergeOutageData({ cutoffTime, outages, siteInfo })\n\n  process.stdout.write(`Found ${siteOutageData.length} applicable site records...\\n`)\n\n  await krakenSystem.postSiteOutages(siteId, siteOutageData)\n\n  console.log('Success')\n}\n\nexport { siteOutageReporter }\n","import { readFile } from 'node:fs/promises'\nimport { resolve as resolvePath } from 'node:path'\n\nconst getConfiguredAPIKey = async (configDir) => {\n  // resolve so we can provide an unambiguous file location in any error report, even if 'configDir' is relative\n  const apiKeyPath = resolvePath(configDir, 'api-key.txt')\n  let apiKey\n  try {\n    apiKey = (await readFile(apiKeyPath, { encoding : 'utf8' })).trim()\n  } catch (e) { // give a more useful error message than just \"no such file\"\n    if (e.code === 'ENOENT') {\n      throw new Error(`Did not find configured API key file '${apiKeyPath}'; configure default key or set API key option.`, { cause : e })\n    } else {\n      throw new Error(`Unknown error occurred while reading configured API key file '${apiKeyPath}' (${e.message}); verify file exists and is readable or set API key option.`, { cause : e })\n    }\n  }\n\n  if (!apiKey) { // if this were real, we would have a defined API key format and check the string against that\n    throw new Error(`Found API key file '${apiKeyPath}', but it was empty.`)\n  }\n\n  return apiKey\n}\n\nexport { getConfiguredAPIKey }\n","const mergeOutageData = ({ cutoffTime, outages, siteInfo }) => {\n  process.stdout.write('Merging data...\\n')\n\n  // produce a map of the device IDs to names so we don't have to be searching the lists every time\n  const deviceIDToNameMap = siteInfo.devices.reduce((map, { id, name }) => { map[id] = name; return map }, {})\n\n  const siteOutageData = outages.reduce((siteOutageData, outage) => {\n    const { begin, id } = outage\n    const deviceName = deviceIDToNameMap[id]\n    if (deviceName !== undefined) { // this will also remove outages with no ID\n      const beginDate = new Date(begin)\n      if (beginDate >= cutoffTime) {\n        outage.name = deviceName\n        siteOutageData.push(outage)\n      }\n    }\n    return siteOutageData\n  }, [])\n\n  return siteOutageData\n}\n\nexport { mergeOutageData }\n","import { siteOutageReporterCLI } from './site-outage-reporter-cli'\n\n(async () => {\n  siteOutageReporterCLI()\n})()\n","import commandLineArgs from 'command-line-args'\nimport { DateTime } from 'string-input'\n\nimport { cliSpec } from './cli-spec'\nimport { siteOutageReporter } from '../lib/site-outage-reporter'\n\nconst siteOutageReporterCLI = async ({ argv = process.argv } = {}) => {\n  let options\n  try {\n    options = commandLineArgs(cliSpec.arguments, { argv, camelCase : true })\n\n    // set our defaults\n    if (options.cutoffTime === undefined) {\n      options.cutoffTime = DateTime('2022-01-01T00:00:00.000Z')\n    }\n    if (options.siteId === undefined) {\n      options.siteId = 'norwich-pear-tree'\n    }\n    // now, convert DateTime to regular Date\n    options.cutoffTime = options.cutoffTime.getDate()\n\n    await siteOutageReporter(options)\n  } catch (e) {\n    if (options.throwError === true) {\n      throw e\n    } // else\n    process.stdout.write(`ERROR: ${e.message}\\n`)\n  }\n}\n\nexport { siteOutageReporterCLI }\n"],"names":["cliSpec","mainCommand","arguments","name","description","type","DateTime","typeDesc","default","Boolean","smartFetch","async","apiKey","url","fetch","global","retryDelay","options","fetchRetry","method","process","stdout","write","fetchOptions","headers","Object","assign","retryOn","attempt","error","response","status","message","data","json","ok","Error","baseURL","KrakenSystem","constructor","this","getOutages","outageData","length","getSiteInfo","siteId","postSiteOutages","siteOutageData","postOptions","body","JSON","stringify","siteOutageReporter","configDir","cwd","cutoffTime","Date","undefined","apiKeyPath","resolvePath","readFile","encoding","trim","e","code","cause","getConfiguredAPIKey","toISOString","krakenSystem","mergeOutageData","outages","siteInfo","deviceIDToNameMap","devices","reduce","map","id","outage","begin","deviceName","push","console","log","argv","commandLineArgs","camelCase","getDate","throwError","siteOutageReporterCLI"],"mappings":"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"}